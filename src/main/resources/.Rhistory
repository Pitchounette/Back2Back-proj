fichier = read.csv("iris.csv", header=TRUE)
fichier
fichier[,1]
fichier = read.csv("iris.csv", header=TRUE)
fichier
fichier = read.csv("iris.csv", header=TRUE)
repertoire = "iris.csv"
y = "Species"
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
repertoire = "iris.csv"
y = "Species"
splitRatio=0.7
minbucket=25
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
library(rpart)
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
fichier = fichier[,-1]
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
fichier
csv
str(fichier)
?csv
?read.csv
fichier = read.csv(repertoire, header=TRUE, row.names = F)
fichier = read.csv(repertoire, header=TRUE, row.names = T)
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
predict.fichier = predict(fichier.rpart, newdata = test.fichier, type="class")
cmat_Cart = table(eval(parse(text=(paste0("test.fichier$",y)))), predict.fichier)
success=0
for (i in 1:nrow(cmat_Cart)){
success = success +  cmat_Cart[i,i]
}
accuracy = success/sum(cmat_Cart)
accuracy
train.fichier
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
text(fichier.rpart)
test.fichier
train.fichier
?sort()
sort(train.fichier, partial = "Species")
sort(train.fichier, partial = 5)
train.fichier = train.fichier[order(train.fichier$Species),]
train.fichier
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
str(train.fichier)
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = 50)
plot(fichier.rpart)
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = 40)
plot(fichier.rpart)
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = 10)
plot(fichier.rpart)
print(plot(fichier.rpart))
predict.fichier = predict(fichier.rpart, newdata = test.fichier, type="class")
cmat_Cart = table(eval(parse(text=(paste0("test.fichier$",y)))), predict.fichier)
success=0
for (i in 1:nrow(cmat_Cart)){
success = success +  cmat_Cart[i,i]
}
accuracy = success/sum(cmat_Cart)
accuracy
cmat_Cart
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = 20)
plot(fichier.rpart)
fichier = read.csv("iris.csv", header=TRUE)
?rpart
train.fichier
summary(train.fichier$Species)
?rpart
repertoire = "iris.csv"
y = "Species"
splitRatio=0.7
minbucket=20
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="exp", minbucket  = minbucket)
library(rpart)
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="exp", minbucket  = minbucket)
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="poisson", minbucket  = minbucket)
plot(fichier.rpart)
y = "idConfiguration"
repertoire = "statsFSEVary.csv"
fichier = read.csv(repertoire, header=TRUE)
nrow(fichier)
str(fichier)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
fichier.rpart
plot(fichier.rpart)
minbucket=10
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
minbucket=30
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
minbucket=40
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
y = "idConfiguration"
repertoire = "statsFSEVary.csv"
minbucket=50
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
y = "idConfiguration"
repertoire = "statsFSEVary.csv"
minbucket=80
fichier = read.csv(repertoire, header=TRUE)
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(y)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
fichier.rpart
train.fichier
y = "nbPages"
repertoire = "statsFSEVary.csv"
minbucket=80
str(fichier$nbPages)
str(fichier$nbPages) == int
str(fichier$nbPages) == integer()
is.factor(fichier$nbPages)
which(colnames(fichier)==y)
str(fichier[,19])
str(fichier[,2])
fichier[,19] =  as.factor(fichier[,19])
fichier
str(fichier)
y = 19
repertoire = "statsFSEVary.csv"
minbucket=20
fichier = read.csv(repertoire, header=TRUE)
if (!is.factor(fichier[,indY])){
fichier[,19] =  as.factor(fichier[,19])
}
indY = 19
repertoire = "statsFSEVary.csv"
minbucket=20
fichier = read.csv(repertoire, header=TRUE)
if (!is.factor(fichier[,indY])){
fichier[,19] =  as.factor(fichier[,19])
}
nameY = names(fichier)[19]
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = rpart(eval(parse(text=(nameY)))~.,data=train.fichier, method="class", minbucket  = minbucket)
plot(fichier.rpart)
length(train.fichier)
length(fichier)
nrow(fichier)
nrow(train.fichier)
train.fichier
repertoire = "iris.csv"
fichier = read.csv(repertoire, header=TRUE)
fichier
lycee <- read.csv2("https://www.data.gouv.fr/s/resources/indicateurs-de-resultat-des-lycees-denseignement-general-et-technologique/20160401-163749/MEN-DEPP-indicateurs-de-resultats-des-LEGT-2015.csv",
sep = ";", header = TRUE, fileEncoding = "ISO-8859-15", na.strings = c(" ",
"."))
lycee
nometab <- paste(lycee$Etablissement, lycee$Code.Etablissement)
nometab <- gsub("LYCEE ", "", nometab)
row.names(lycee) <- nometab
library(dplyr)
lycee2 <- select(lycee, Secteur.Public.PU.Privé.PR, Académie, Sructure.pédagogique.en.7.groupes,
Taux.Brut.de.Réussite.Total.séries, Taux.Réussite.Attendu.toutes.séries,
Effectif.de.seconde, Effectif.de.première, Effectif.de.terminale)
for (i in 4:ncol(lycee2)) {
lycee2[, i] <- as.numeric(as.character(lycee2[, i]))
}
lycee2
str(lycee2)
install.packages("randomForest")
fit <- randomForest(Secteur.Public.PU.Privé.PR ~ ., data = lycee2, na.action = na.roughfix)
library(randomForest)
str(lycee2)
fit <- randomForest(Secteur.Public.PU.Privé.PR ~ ., data = lycee2, na.action = na.roughfix)
plot(fit)
plotcp(fit)
print(fit)
?randomForest
fit$confusion
fit <- randomForest(Secteur.Public.PU.Privé.PR ~ ., data = lycee2, ntree = 5000,
mtry = 2, na.action = na.roughfix)
fit$confusion
fit <- randomForest(Secteur.Public.PU.Privé.PR ~ ., data = lycee2, ntree = 2000,
mtry = 4, na.action = na.roughfix)
fit$confusion
predict.fit = predict(fit, newdata = lycee2)
predict.fit
table(lycee2, predict.fichier)
table(lycee2$Secteur.Public.PU.Privé.PR, predict.fichier)
table(lycee2$Secteur.Public.PU.Privé.PR, predict.fit)
lycee2
long = nrow(lycee2)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.lycee2 = lycee2[indTrain,]
test.lycee2 = lycee2[-indTrain,]
fit <- randomForest(Secteur.Public.PU.Privé.PR ~ ., data = train.lycee2, ntree = 2000,
mtry = 4, na.action = na.roughfix)
fit$confusion
predict.fit = predict(fit, newdata = test.lycee2)
table(lycee2$Secteur.Public.PU.Privé.PR, predict.fit)
table(test.lycee2$Secteur.Public.PU.Privé.PR, predict.fit)
?rpart
foret_aléatoire = function(repertoire, indY, ntree, mtry){
fichier = read.csv(repertoire, header=TRUE)
if (!is.factor(fichier[,indY]) & transform){
fichier[indY] =  as.factor(fichier[,indY])
}
nameY = names(fichier)[indY]
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = randomForest(eval(parse(text=(nameY))) ~ ., data = train.fichier, ntree = ntree,
mtry = mtry, na.action = na.roughfix)
predict.fichier = predict(fichier.rpart, newdata = test.fichier)
cmat_Cart = table(eval(parse(text=(paste0("test.fichier$",nameY)))), predict.fichier)
success=0
for (i in 1:nrow(cmat_Cart)){
success = success +  cmat_Cart[i,i]
}
accuracy = success/sum(cmat_Cart)
return(accuracy)
}
repertoire = "iris.csv"
indY = 5
ntree = 2000
mtry = 4
acc = foret_aléatoire(repertoire, indY, ntree, mtry)
foret_aléatoire = function(repertoire, indY, ntree, mtry, transform = FALSE){
fichier = read.csv(repertoire, header=TRUE)
if (!is.factor(fichier[,indY]) & transform){
fichier[indY] =  as.factor(fichier[,indY])
}
nameY = names(fichier)[indY]
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = randomForest(eval(parse(text=(nameY))) ~ ., data = train.fichier, ntree = ntree,
mtry = mtry, na.action = na.roughfix)
predict.fichier = predict(fichier.rpart, newdata = test.fichier)
cmat_Cart = table(eval(parse(text=(paste0("test.fichier$",nameY)))), predict.fichier)
success=0
for (i in 1:nrow(cmat_Cart)){
success = success +  cmat_Cart[i,i]
}
accuracy = success/sum(cmat_Cart)
return(accuracy)
}
acc = foret_aléatoire(repertoire, indY, ntree, mtry)
acc
ntree = 20
mtry = 4
acc = foret_aléatoire(repertoire, indY, ntree, mtry)
acc
repertoire = "iris.csv"
indY = 5
ntree = 2
mtry = 4
foret_aléatoire = function(repertoire, indY, ntree, mtry, transform = FALSE){
fichier = read.csv(repertoire, header=TRUE)
if (!is.factor(fichier[,indY]) & transform){
fichier[indY] =  as.factor(fichier[,indY])
}
nameY = names(fichier)[indY]
long = nrow(fichier)
longTrain = round(long*splitRatio)
indTrain = sample(1:long, longTrain)
train.fichier = fichier[indTrain,]
test.fichier = fichier[-indTrain,]
set.seed(runif(1,0,1000))
fichier.rpart = randomForest(eval(parse(text=(nameY))) ~ ., data = train.fichier, ntree = ntree,
mtry = mtry, na.action = na.roughfix)
predict.fichier = predict(fichier.rpart, newdata = test.fichier)
cmat_Cart = table(eval(parse(text=(paste0("test.fichier$",nameY)))), predict.fichier)
success=0
for (i in 1:nrow(cmat_Cart)){
success = success +  cmat_Cart[i,i]
}
accuracy = success/sum(cmat_Cart)
return(accuracy)
}
acc = foret_aléatoire(repertoire, indY, ntree, mtry)
acc
repertoire = "iris.csv"
indY = 5
ntree = 2
mtry = 2
acc = foret_aléatoire(repertoire, indY, ntree, mtry)
acc
library(randomForest)
b = "TRUE"
c = as.logical(b)
c
str(c)
str(b)
str(TRUE)
